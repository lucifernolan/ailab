1.DFS :

def dfs(node, graph, visited, component):
    component.append(node)  # Store answer
    visited[node] = True  # Mark visited

    # Traverse to each adjacent node of a node
    for child in graph[node]:
        if not visited[child]:  # Check whether the node is visited or not
            dfs(child, graph, visited, component)  # Call the dfs recursively

if __name__ == "__main__":
    # Graph of nodes
    graph = {
        0: [2],
        1: [2, 3],
        2: [0, 1, 4],
        3: [1, 4],
        4: [2, 3]
    }

    node = 0  # Starting node
    visited = [False] * len(graph)  # Make all nodes to False initially

    component = []
    dfs(node, graph, visited, component)  # Traverse to each node of a graph
    print(f"Following is the Depth-first search: {component}")  # Print the answer

--------------------------------------------------------------------------------------
2.WATER JUG:

from collections import defaultdict 

jug1, jug2, aim = 4, 3, 2
visited = defaultdict(lambda: False) 

def waterJugSolver(amt1, amt2):
    if (amt1 == aim and amt2 == 0) or (amt2 == aim and amt1 == 0): 
        print(amt1, amt2)
        return True

    if visited[(amt1, amt2)] == False: 
        print(amt1, amt2)
        visited[(amt1, amt2)] = True
        return (
            waterJugSolver(0, amt2) or
            waterJugSolver(amt1, 0) or
            waterJugSolver(jug1, amt2) or
            waterJugSolver(amt1, jug2) or
            waterJugSolver(amt1 + min(amt2, (jug1-amt1)), amt2 - min(amt2, (jug1-amt1))) or
            waterJugSolver(amt1 - min(amt1, (jug2-amt2)), amt2 + min(amt1, (jug2-amt2)))
        )
    else:
        return False

print("Steps: ")
waterJugSolver(0, 0)

--------------------------------------------------------------------------------------
3.UNIFORM COST SEARCH:

def uniform_cost_search(goal, start):
    global graph, cost
    answer = []
    queue = []

    for i in range(len(goal)):
        answer.append(10**8)

    queue.append([0, start])
    visited = {}
    count = 0

    while len(queue) > 0:
        queue = sorted(queue)
        p = queue[-1]
        del queue[-1]
        p[0] *= -1

        if p[1] in goal:
            index = goal.index(p[1])
            if answer[index] == 10**8:
                count += 1
            if answer[index] > p[0]:
                answer[index] = p[0]
            del queue[-1]
            queue = sorted(queue)

        if count == len(goal):
            return answer

        if p[1] not in visited:
            for i in range(len(graph[p[1]])):
                queue.append([(p[0] + cost[(p[1], graph[p[1]][i])]) * -1, graph[p[1]][i]])
            visited[p[1]] = 1

    return answer

if __name__ == '__main__':
    graph, cost = [[] for _ in range(8)], {}

    graph[0].append(1)
    graph[0].append(3)
    graph[3].append(1)
    graph[3].append(6)
    graph[3].append(4)
    graph[1].append(6)
    graph[4].append(2)
    graph[4].append(5)
    graph[2].append(1)
    graph[5].append(2)
    graph[5].append(6)
    graph[6].append(4)

    # add the cost
    cost[(0, 1)] = 2
    cost[(0, 3)] = 5
    cost[(1, 6)] = 1
    cost[(3, 1)] = 5
    cost[(3, 6)] = 6
    cost[(3, 4)] = 2
    cost[(2, 1)] = 4
    cost[(4, 2)] = 4
    cost[(4, 5)] = 3
    cost[(5, 2)] = 6
    cost[(5, 6)] = 3
    cost[(6, 4)] = 7

    goal = [6]
    answer = uniform_cost_search(goal, 0)
    print("Minimum cost from 0 to 6 is =", answer[0])

--------------------------------------------------------------------------------------
4.N-QUEENS:
global N
N = 4

def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j], end=' ')
        print()

def isSafe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solveNQUtil(board, col):
    if col >= N:
        return True

    for i in range(N):
        if isSafe(board, i, col):
            board[i][col] = 1
            if solveNQUtil(board, col + 1):
                return True
            board[i][col] = 0

    return False

def solveNQ():
    board = [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ]

    if solveNQUtil(board, 0) == False:
        print("Solution does not exist")
        return False

    printSolution(board)
    return True

if __name__ == "__main__":
    solveNQ()

--------------------------------------------------------------------------------------
5.HILL CLIMBING:

import random
import copy

class State:
    def __init__(self, route=[], distance=0):
        self.route = route
        self.distance = distance

    def __eq__(self, other):
        for i in range(len(self.route)):
            if self.route[i] != other.route[i]:
                return False
        return True

    def __lt__(self, other):
        return self.distance < other.distance

    def __repr__(self):
        return '({0},{1})\n'.format(self.route, self.distance)

    def copy(self):
        return State(self.route, self.distance)

    def deepcopy(self):
        return State(copy.deepcopy(self.route), copy.deepcopy(self.distance))

    def update_distance(self, matrix, home):
        self.distance = 0
        from_index = home
        for i in range(len(self.route)):
            self.distance += matrix[from_index][self.route[i]]
            from_index = self.route[i]
        self.distance += matrix[from_index][home]

class City:
    def __init__(self, index, distance):
        self.index = index
        self.distance = distance

    def __lt__(self, other):
        return self.distance < other.distance

def get_random_solution(matrix, home, city_indexes, size, use_weights=False):
    cities = city_indexes.copy()
    cities.pop(home)
    population = []

    for i in range(size):
        if use_weights:
            state = get_random_solution_with_weights(matrix, home)
        else:
            random.shuffle(cities)
            state = State(cities[:])
        state.update_distance(matrix, home)
        population.append(state)

    population.sort()
    return population[0]

def get_best_solution_by_distance(matrix, home):
    route = []
    from_index = home
    length = len(matrix) - 1

    while len(route) < length:
        row = matrix[from_index]
        cities = {i: City(i, row[i]) for i in range(len(row)) if i != home and i not in route}
        sorted_cities = sorted(cities.values())
        from_index = sorted_cities[0].index
        route.append(from_index)

    state = State(route)
    state.update_distance(matrix, home)
    return state

def get_random_solution_with_weights(matrix, home):
    route = []
    from_index = home
    length = len(matrix) - 1

    while len(route) < length:
        row = matrix[from_index]
        cities = {i: City(i, row[i]) for i in range(len(row)) if i != home and i not in route}
        total_weight = sum(city.distance for city in cities.values())
        weights = [total_weight / city.distance for city in cities.values()]
        from_index = random.choices(list(cities.keys()), weights=weights)[0]
        route.append(from_index)

    state = State(route)
    state.update_distance(matrix, home)
    return state

def mutate(matrix, home, state, mutation_rate=0.01):
    mutated_state = state.deepcopy()

    for i in range(len(mutated_state.route)):
        if random.random() < mutation_rate:
            j = int(random.random() * len(state.route))
            city_1 = mutated_state.route[i]
            city_2 = mutated_state.route[j]
            mutated_state.route[i] = city_2
            mutated_state.route[j] = city_1

    mutated_state.update_distance(matrix, home)
    return mutated_state

def hill_climbing(matrix, home, initial_state, max_iterations, mutation_rate=0.01):
    best_state = initial_state
    iterator = 0

    while True:
        neighbor = mutate(matrix, home, best_state, mutation_rate)

        if neighbor.distance >= best_state.distance:
            iterator += 1
            if iterator > max_iterations:
                break
        if neighbor.distance < best_state.distance:
            best_state = neighbor

    return best_state

def main():
    cities = ['New York', 'Los Angeles', 'Chicago', 'Minneapolis', 'Denver', 'Dallas', 'Seattle', 'Boston',
              'San Francisco', 'St. Louis', 'Houston', 'Phoenix', 'Salt Lake City']
    city_indexes = list(range(len(cities)))
    home = 2
    max_iterations = 1000

    matrix = [
        [0, 2451, 713, 1018, 1631, 1374, 2408, 213, 2571, 875, 1420, 2145, 1972],
        [2451, 0, 1745, 1524, 831, 1240, 959, 2596, 403, 1589, 1374, 357, 579],
        [713, 1745, 0, 355, 920, 803, 1737, 851, 1858, 262, 940, 1453, 1260],
        [1018, 1524, 355, 0, 700, 862, 1395, 1123, 1584, 466, 1056, 1280, 987],
        [1631, 831, 920, 700, 0, 663, 1021, 1769, 949, 796, 879, 586, 371],
        [1374, 1240, 803, 862, 663, 0, 1681, 1551, 1765, 547, 225, 887, 999],
        [2408, 959, 1737, 1395, 1021, 1681, 0, 2493, 678, 1724, 1891, 1114, 701],
        [213, 2596, 851, 1123, 1769, 1551, 2493, 0, 2699, 1038, 1605, 2300, 2099],
        [2571, 403, 1858, 1584, 949, 1765, 678, 2699, 0, 1744, 1645, 653, 600],
        [875, 1589, 262, 466, 796, 547, 1724, 1038, 1744, 0, 679, 1272, 1162],
        [1420, 1374, 940, 1056, 879, 225, 1891, 1605, 1645, 679, 0, 1017, 1200],
        [2145, 357, 1453, 1280, 586, 887, 1114, 2300, 653, 1272, 1017, 0, 504],
        [1972, 579, 1260, 987, 371, 999, 701, 2099, 600, 1162, 1200, 504, 0]
    ]

    state = get_best_solution_by_distance(matrix, home)
    print('-- Best solution by distance --')
    print(cities[home], end='')
    for i in range(len(state.route)):
        print(' -> ' + cities[state.route[i]], end='')
    print(' -> ' + cities[home], end='')
    print('\n\nTotal distance: {0} miles'.format(state.distance))
    print()

    state = get_random_solution(matrix, home, city_indexes, 100)
    print('-- Best random solution --')
    print(cities[home], end='')
    for i in range(len(state.route)):
        print(' -> ' + cities[state.route[i]], end='')
    print(' -> ' + cities[home], end='')
    print('\n\nTotal distance: {0} miles'.format(state.distance))
    print()

    state = get_random_solution(matrix, home, city_indexes, 100, use_weights=True)
    print('-- Best random solution with weights --')
    print(cities[home], end='')
    for i in range(len(state.route)):
        print(' -> ' + cities[state.route[i]], end='')
    print(' -> ' + cities[home], end='')
    print('\n\nTotal distance: {0} miles'.format(state.distance))
    print()

    state = get_best_solution_by_distance(matrix, home)
    state = hill_climbing(matrix, home, state, max_iterations, 0.1)
    print('-- Hill climbing solution --')
    print(cities[home], end='')
    for i in range(len(state.route)):
        print(' -> ' + cities[state.route[i]], end='')
    print(' -> ' + cities[home], end='')
    print('\n\nTotal distance: {0} miles'.format(state.distance))
    print()

if __name__ == "__main__":
    main()

--------------------------------------------------------------------------------------
6.A* ALGORITHM:

import heapq
def astar_search(graph, start, end):
    open_list = [(0, start)]
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == end:
            return reconstruct_path(came_from, current)

        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost

            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                heapq.heappush(open_list, (g_score[neighbor] + heuristic(neighbor, end), neighbor))

    return None

def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]

def heuristic(node, goal):
    # Replace this heuristic with an appropriate one for your problem
    return abs(ord(node) - ord(goal))

# Define a larger graph
graph = {
    'A': {'B': 1, 'C': 2, 'D': 4},
    'B': {'A': 1, 'E': 3, 'F': 5},
    'C': {'A': 2, 'G': 4},
    'D': {'A': 4, 'H': 5},
    'E': {'B': 3, 'I': 6},
    'F': {'B': 5},
    'G': {'C': 4},
    'H': {'D': 5, 'J': 7},
    'I': {'E': 6},
    'J': {'H': 7},
}

start = input("Enter the start node: ")
end = input("Enter the end node: ")

path = astar_search(graph, start, end)

if path:
    print("Path found:", " -> ".join(path))
else:
    print("No path found")

--------------------------------------------------------------------------------------
7.CANNIBALS:
lM = 3
lC = 3
rM = 0
rC = 0
userM = 0
userC = 0
k = 0

print("\nMMMCCC| ---|\n")

try:
    while True:
        while True:
            print("Left side -> right side river travel")

            uM = int(input("Enter number of Missionaries travel => "))
            uC = int(input("Enter number of Cannibals travel => "))

            if uM == 0 and uC == 0:
                print("Empty travel not possible")
                print("Re-enter : ")
            elif (uM + uC) <= 2 and (lM - uM) >= 0 and (lC - uC) >= 0:
                break
            else:
                print("Wrong input re-enter : ")

        lM -= uM
        lC -= uC
        rM += uM
        rC += uC

        print("\n")
        for i in range(0, lM):
            print("M ", end="")
        for i in range(0, lC):
            print("C ", end="")
        print("| --> | ", end="")
        for i in range(0, rM):
            print("M ", end="")
        for i in range(0, rC):
            print("C ", end="")
        print("\n")

        k += 1

        if (
            (lC == 3 and lM == 1)
            or (lC == 3 and lM == 2)
            or (lC == 2 and lM == 1)
            or (rC == 3 and rM == 1)
            or (rC == 3 and rM == 2)
            or (rC == 2 and rM == 1)
        ):
            print("Cannibals eat missionaries:\nYou lost the game")
            break

        if (rM + rC) == 6:
            print("You won the game:\n\tCongrats")
            print("Total attempt:", k)
            break

        while True:
            print("Right side -> Left side river travel")

            userM = int(input("Enter number of Missionaries travel => "))
            userC = int(input("Enter number of Cannibals travel => "))

            if userM == 0 and userC == 0:
                print("Empty travel not possible")
                print("Re-enter : ")
            elif (userM + userC) <= 2 and (rM - userM) >= 0 and (rC - userC) >= 0:
                break
            else:
                print("Wrong input re-enter : ")

        lM += userM
        lC += userC
        rM -= userM
        rC -= userC

        k += 1

        print("\n")
        for i in range(0, lM):
            print("M ", end="")
        for i in range(0, lC):
            print("C ", end="")
        print("| <-- | ", end="")
        for i in range(0, rM):
            print("M ", end="")
        for i in range(0, rC):
            print("C ", end="")
        print("\n")

        if (
            (lC == 3 and lM == 1)
            or (lC == 3 and lM == 2)
            or (lC == 2 and lM == 1)
            or (rC == 3 and rM == 1)
            or (rC == 3 and rM == 2)
            or (rC == 2 and rM == 1)
        ):
            print("Cannibals eat missionaries:\nYou lost the game")
            break

except EOFError as e:
    print("\nInvalid input, please retry !!")

--------------------------------------------------------------------------------------
8.BEST FIRST SEARCH:

from queue import PriorityQueue
v = 14
graph = [[] for i in range(v)]
# Function For Implementing Best First Search
# Gives output path having the lowest cost
def best_first_search(actual_Src, target, n):
    visited = [False] * n
    pq = PriorityQueue()
    pq.put((0, actual_Src))
    visited[actual_Src] = True

    while not pq.empty():
        u = pq.get()[1]

        # Displaying the path having the lowest cost
        print(u, end=" ")
        if u == target:
            break

        for v, c in graph[u]:
            if not visited[v]:
                visited[v] = True
                pq.put((c, v))

    print()
# Function for adding edges to the graph
def add_edge(x, y, cost):
    graph[x].append((y, cost))
    graph[y].append((x, cost))
# The nodes shown in the above example (by alphabets) are
# implemented using integers
add_edge(0, 1, 3)
add_edge(0, 2, 6)
add_edge(0, 3, 5)
add_edge(1, 4, 9)
add_edge(1, 5, 8)
add_edge(2, 6, 12)
add_edge(2, 7, 14)
add_edge(3, 8, 7)
add_edge(8, 9, 5)
add_edge(8, 10, 6)
add_edge(9, 11, 1)
add_edge(9, 12, 10)
add_edge(9, 13, 2)

source = 0
target = 9
best_first_search(source, target, v)

--------------------------------------------------------------------------------------
9.BFS:

graph = {
    '5': ['3', '7'],
    '3': ['2', '4'],
    '7': ['8'],
    '2': [],
    '4': ['8'],
    '8': []
}
visited = []  # List for visited nodes.
queue = []    # Initialize a queue
def bfs(visited, graph, node):
    # function for BFS
    visited.append(node)
    queue.append(node)

    while queue:
        # Creating loop to visit each node
        m = queue.pop(0)
        print(m, end=" ")

        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.append(neighbour)
                queue.append(neighbour)
# Driver Code
print("Following is the Breadth-First Search:")
bfs(visited, graph, '5')  # function calling

--------------------------------------------------------------------------------------
