import heapq
def astar_search(graph, start, end):
    open_list = [(0, start)]
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    while open_list:
        _, current = heapq.heappop(open_list)
        if current == end:
            return reconstruct_path(came_from, current)
        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                heapq.heappush(open_list, (g_score[neighbor] + heuristic(neighbor, end), neighbor))
    return None
def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]

def heuristic(node, goal):
    # Replace this heuristic with an appropriate one for your problem
    return abs(ord(node) - ord(goal))
# Define a larger graph
graph = {
    'A': {'B': 1, 'C': 2, 'D': 4},
    'B': {'A': 1, 'E': 3, 'F': 5},
    'C': {'A': 2, 'G': 4},
    'D': {'A': 4, 'H': 5},
    'E': {'B': 3, 'I': 6},
    'F': {'B': 5},
    'G': {'C': 4},
    'H': {'D': 5, 'J': 7},
    'I': {'E': 6},
    'J': {'H': 7},
}
start = input("Enter the start node: ")
end = input("Enter the end node: ")

path = astar_search(graph, start, end)

if path:
    print("Path found:", " -> ".join(path))
else:
    print("No path found")